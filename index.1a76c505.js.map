{"mappings":"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","sources":["./node_modules/hammerjs/hammer.js","./node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/index.js","./src/Carousel.js"],"sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import { Carousel } from './Carousel';\n\n\nconst board = document.querySelector('#board')\n\nconst carousel = new Carousel(board)","import Hammer from 'hammerjs';\n\n\n/* LikeCarousel (c) 2019 Simone P.M. github.com/simonepm - Licensed MIT */\n\nexport class Carousel {\n\n    constructor(element) {\n\n        this.board = element\n\n        // add first two cards programmatically\n        this.push()\n        this.push()\n\n        // handle gestures\n        this.handle()\n\n    }\n\n    handle() {\n\n        // list all cards\n        this.cards = this.board.querySelectorAll('.card')\n\n        // get top card\n        this.topCard = this.cards[this.cards.length - 1]\n\n        // get next card\n        this.nextCard = this.cards[this.cards.length - 2]\n\n        // if at least one card is present\n        if (this.cards.length > 0) {\n\n            // set default top card position and scale\n            this.topCard.style.transform =\n                'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'\n\n            // destroy previous Hammer instance, if present\n            if (this.hammer) this.hammer.destroy()\n\n            // listen for tap and pan gestures on top card\n            this.hammer = new Hammer(this.topCard)\n            this.hammer.add(new Hammer.Tap())\n            this.hammer.add(new Hammer.Pan({\n                position: Hammer.position_ALL,\n                threshold: 0\n            }))\n\n            // pass events data to custom callbacks\n            this.hammer.on('tap', (e) => {\n                this.onTap(e)\n            })\n            this.hammer.on('pan', (e) => {\n                this.onPan(e)\n            })\n\n        }\n\n    }\n\n    onTap(e) {\n\n        // get finger position on top card\n        let propX = (e.center.x - e.target.getBoundingClientRect().left) / e.target.clientWidth\n\n        // get rotation degrees around Y axis (+/- 15) based on finger position\n        let rotateY = 15 * (propX < 0.05 ? -1 : 1)\n\n        // enable transform transition\n        this.topCard.style.transition = 'transform 100ms ease-out'\n\n        // apply rotation around Y axis\n        this.topCard.style.transform =\n            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(' + rotateY + 'deg) scale(1)'\n\n        // wait for transition end\n        setTimeout(() => {\n            // reset transform properties\n            this.topCard.style.transform =\n                'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'\n        }, 100)\n\n    }\n\n    onPan(e) {\n\n        if (!this.isPanning) {\n\n            this.isPanning = true\n\n            // remove transition properties\n            this.topCard.style.transition = null\n            if (this.nextCard) this.nextCard.style.transition = null\n\n            // get top card coordinates in pixels\n            let style = window.getComputedStyle(this.topCard)\n            let mx = style.transform.match(/^matrix\\((.+)\\)$/)\n            this.startPosX = mx ? parseFloat(mx[1].split(', ')[4]) : 0\n            this.startPosY = mx ? parseFloat(mx[1].split(', ')[5]) : 0\n\n            // get top card bounds\n            let bounds = this.topCard.getBoundingClientRect()\n\n            // get finger position on top card, top (1) or bottom (-1)\n            this.isDraggingFrom =\n                (e.center.y - bounds.top) > this.topCard.clientHeight / 2 ? -1 : 1\n\n        }\n\n        // get new coordinates\n        let posX = e.deltaX + this.startPosX\n        let posY = e.deltaY + this.startPosY\n\n        // get ratio between swiped pixels and the axes\n        let propX = e.deltaX / this.board.clientWidth\n        let propY = e.deltaY / this.board.clientHeight\n\n        // get swipe direction, left (-1) or right (1)\n        let dirX = e.deltaX < 0 ? -1 : 1\n\n        // get degrees of rotation, between 0 and +/- 45\n        let deg = this.isDraggingFrom * dirX * Math.abs(propX) * 45\n\n        // get scale ratio, between .95 and 1\n        let scale = (95 + (5 * Math.abs(propX))) / 100\n\n        // move and rotate top card\n        this.topCard.style.transform =\n            'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg) rotateY(0deg) scale(1)'\n\n        // scale up next card\n        if (this.nextCard) this.nextCard.style.transform =\n            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(' + scale + ')'\n\n        if (e.isFinal) {\n\n            this.isPanning = false\n\n            let successful = false\n\n            // set back transition properties\n            this.topCard.style.transition = 'transform 200ms ease-out'\n            if (this.nextCard) this.nextCard.style.transition = 'transform 100ms linear'\n\n            // check threshold and movement direction\n            if (propX > 0.25 && e.direction == Hammer.DIRECTION_RIGHT) {\n\n                successful = true\n                // get right border position\n                posX = this.board.clientWidth\n\n            } else if (propX < -0.25 && e.direction == Hammer.DIRECTION_LEFT) {\n\n                successful = true\n                // get left border position\n                posX = -(this.board.clientWidth + this.topCard.clientWidth)\n\n            } else if (propY < -0.25 && e.direction == Hammer.DIRECTION_UP) {\n\n                successful = true\n                // get top border position\n                posY = -(this.board.clientHeight + this.topCard.clientHeight)\n\n            }\n\n            if (successful) {\n\n                // throw card in the chosen direction\n                this.topCard.style.transform =\n                    'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg)'\n\n                // wait transition end\n                setTimeout(() => {\n                    // remove swiped card\n                    this.board.removeChild(this.topCard)\n                    // add new card\n                    this.push()\n                    // handle gestures on new top card\n                    this.handle()\n                }, 200)\n\n            } else {\n\n                // reset cards position and size\n                this.topCard.style.transform =\n                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)'\n                if (this.nextCard) this.nextCard.style.transform =\n                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(0.95)'\n\n            }\n\n        }\n\n    }\n\n    push() {\n\n        let card = document.createElement('div')\n\n        card.classList.add('card')\n\n        card.style.backgroundImage =\n            \"url('https://picsum.photos/320/320/?random=\" + Math.round(Math.random() * 1000000) + \"')\"\n\n        this.board.insertBefore(card, this.board.firstChild)\n\n    }\n\n}\n"],"names":["window","document","exportName","undefined","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","this","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","childP","baseP","prototype","create","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_MOUSE","DIRECTION_VERTICAL","DIRECTION_UP","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","direction","last","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","TouchMouseInput","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","isSyntheticEvent","t","dx","dy","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","value","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","DIRECTION_LEFT","preventSrc","STATE_FAILED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","recognizeWith","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","DIRECTION_HORIZONTAL","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","triggerDomEvent","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","DIRECTION_NONE","DIRECTION_RIGHT","DIRECTION_DOWN","DIRECTION_ALL","Tap","Pan","Swipe","Pinch","Rotate","Press","$aa7f4cfa02a446ef69d651b356fbfdc0$exports","__esModule","default","$5c02d3acd7bd3269bdafe35e7ce6aa96$var$board","querySelector","$5c02d3acd7bd3269bdafe35e7ce6aa96$var$carousel","board","handle","cards","querySelectorAll","topCard","nextCard","transform","hammer","position","position_ALL","onTap","onPan","rotateY","getBoundingClientRect","left","clientWidth","transition","isPanning","mx","getComputedStyle","match","startPosX","parseFloat","startPosY","bounds","isDraggingFrom","top","clientHeight","posX","posY","propX","propY","dirX","deg","successful","removeChild","card","classList","backgroundImage","random","insertBefore","firstChild"],"version":3,"file":"index.1a76c505.js.map"}